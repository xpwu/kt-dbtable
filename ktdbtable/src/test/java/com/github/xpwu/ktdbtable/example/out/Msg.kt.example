@file:JvmName("MsgTable")
package com.github.xpwu.ktdbtable

// This file is generated by ktdbtable_processor. DO NOT edit it!

import android.content.ContentValues
import android.database.Cursor
import com.github.xpwu.ktdbtable.*

@Deprecated("", replaceWith = ReplaceWith("asTable().OriginNameIn"))
fun Msg.Companion.TableNameIn(db: com.github.xpwu.ktdbtable.DB<*>): String {
  return Msg.CreateTableAndReturnNameIn(db)
}

private fun Msg.Companion.CreateTableAndReturnNameIn(db: com.github.xpwu.ktdbtable.DB<*>): String {
  val name = db.Name(Msg::class) ?: tableName

  if (!db.Exist(name)) {
    Msg.CreateTableIn(db)
    db.Open(name)
  } else {
    db.OpenAndUpgrade(Msg::class, Msg.TableInfo())
  }

  return name
}

fun Msg.Companion.asTable(): Table {
  return object : Table {
    override fun OriginNameIn(db: DB<*>): String {
      return Msg.CreateTableAndReturnNameIn(db)
    }
  }
}

val Msg.Companion.Id
  get() = StringColumn("id")

val Msg.Companion.Name
  get() = StringColumn("name")

val Msg.Companion.LocaleNo
  get() = IntColumn("local_no")

val Msg.Companion.No
  get() = IntColumn("no")

val Msg.Companion.No00
  get() = IntColumn("no00")

val Msg.Companion.No1
  get() = ShortColumn("no1")

val Msg.Companion.No11
  get() = ShortColumn("no11")

val Msg.Companion.No2
  get() = ByteColumn("no2")

val Msg.Companion.No22
  get() = ByteColumn("no22")

val Msg.Companion.No3
  get() = DoubleColumn("no3")

val Msg.Companion.No33
  get() = DoubleColumn("no33")

val Msg.Companion.No4
  get() = FloatColumn("no4")

val Msg.Companion.No44
  get() = FloatColumn("no44")

val Msg.Companion.No5
  get() = LongColumn("no5")

val Msg.Companion.No55
  get() = LongColumn("no55")

val Msg.Companion.No6
  get() = BooleanColumn("no6")

val Msg.Companion.No66
  get() = BooleanColumn("no66")

val Msg.Companion.NoS
  get() = StringColumn("nos")

val Msg.Companion.NoBA
  get() = ElseColumn("noba")

val Msg.Companion.Ts
  get() = IntColumn("ts")



fun Msg.Companion.AllColumns(): List<ColumnInfo> {
  return listOf(
    Id, Name, LocaleNo, No, No00, No1, No11, No2, No22, No3, No33, No4, No44, No5, No55, No6, No66, NoS, NoBA, Ts,
  )
}

fun Msg.Companion.Binding(): TableBinding {
  return MakeBinding(Msg::class, tableName)
}

fun Msg.Companion.TableInfo(): TableInfo {
  return TableInfo(tableVersion, Msg.Migrators(),
    Msg.allIndex(),
    mapOf(
      "id" to "ALTER TABLE msg ADD COLUMN `id` TEXT   ",
      "name" to "ALTER TABLE msg ADD COLUMN `name` TEXT   ",
      "local_no" to "ALTER TABLE msg ADD COLUMN `local_no` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ",
      "no" to "ALTER TABLE msg ADD COLUMN `no` INTEGER   ",
      "no00" to "ALTER TABLE msg ADD COLUMN `no00` INTEGER   ",
      "no1" to "ALTER TABLE msg ADD COLUMN `no1` INTEGER   ",
      "no11" to "ALTER TABLE msg ADD COLUMN `no11` INTEGER   ",
      "no2" to "ALTER TABLE msg ADD COLUMN `no2` INTEGER   ",
      "no22" to "ALTER TABLE msg ADD COLUMN `no22` INTEGER   ",
      "no3" to "ALTER TABLE msg ADD COLUMN `no3` REAL   ",
      "no33" to "ALTER TABLE msg ADD COLUMN `no33` REAL   ",
      "no4" to "ALTER TABLE msg ADD COLUMN `no4` REAL   ",
      "no44" to "ALTER TABLE msg ADD COLUMN `no44` REAL   ",
      "no5" to "ALTER TABLE msg ADD COLUMN `no5` INTEGER   ",
      "no55" to "ALTER TABLE msg ADD COLUMN `no55` INTEGER   ",
      "no6" to "ALTER TABLE msg ADD COLUMN `no6` INTEGER   ",
      "no66" to "ALTER TABLE msg ADD COLUMN `no66` INTEGER   ",
      "nos" to "ALTER TABLE msg ADD COLUMN `nos` TEXT   ",
      "noba" to "ALTER TABLE msg ADD COLUMN `noba` BLOB   ",
      "ts" to "ALTER TABLE msg ADD COLUMN `ts` INTEGER   ",
    ),
    tableName
  )
}



fun Msg.Companion.Initializer(): Collection<Msg> {
  return emptyList()
}

// IndexName => IndexSQL
// IndexSQL: "CREATE INDEX IF NOT EXISTS ..."
private fun Msg.Companion.allIndex(): Map<String, String> {
  return mapOf(
  )
}

fun Msg.ToContentValues(columns: List<ColumnInfo> = Msg.AllColumns()): ContentValues {
  val cv = ContentValues(columns.size)
  for (column in columns) {
    when(column.toString()) {
      Msg.Id.toString() -> cv.put("`$column`", this.Id)
      Msg.Name.toString() -> cv.put("`$column`", this.Name)
      Msg.LocaleNo.toString() -> cv.put("`$column`", this.LocaleNo)
      Msg.No.toString() -> cv.put("`$column`", this.No)
      Msg.No00.toString() -> cv.put("`$column`", this.No00)
      Msg.No1.toString() -> cv.put("`$column`", this.No1)
      Msg.No11.toString() -> cv.put("`$column`", this.No11)
      Msg.No2.toString() -> cv.put("`$column`", this.No2)
      Msg.No22.toString() -> cv.put("`$column`", this.No22)
      Msg.No3.toString() -> cv.put("`$column`", this.No3)
      Msg.No33.toString() -> cv.put("`$column`", this.No33)
      Msg.No4.toString() -> cv.put("`$column`", this.No4)
      Msg.No44.toString() -> cv.put("`$column`", this.No44)
      Msg.No5.toString() -> cv.put("`$column`", this.No5)
      Msg.No55.toString() -> cv.put("`$column`", this.No55)
      Msg.No6.toString() -> cv.put("`$column`", this.No6)
      Msg.No66.toString() -> cv.put("`$column`", this.No66)
      Msg.NoS.toString() -> cv.put("`$column`", this.NoS)
      Msg.NoBA.toString() -> cv.put("`$column`", this.NoBA)
      Msg.Ts.toString() -> cv.put("`$column`", this.Ts)

      else -> {
        throw IllegalArgumentException("Illegal column $column for Msg")
      }
    }
  }

  return cv
}

data class MsgHas(
  val Id: Boolean,
  val Name: Boolean,
  val LocaleNo: Boolean,
  val No: Boolean,
  val No00: Boolean,
  val No1: Boolean,
  val No11: Boolean,
  val No2: Boolean,
  val No22: Boolean,
  val No3: Boolean,
  val No33: Boolean,
  val No4: Boolean,
  val No44: Boolean,
  val No5: Boolean,
  val No55: Boolean,
  val No6: Boolean,
  val No66: Boolean,
  val NoS: Boolean,
  val NoBA: Boolean,
  val Ts: Boolean,

)

fun Cursor.ToMsg(out: Msg): MsgHas {
  val has = BooleanArray(20)
  for (i in 0 until this.columnCount) {
    if (this.isNull(i)) continue
    when(this.getColumnName(i)) {
      Msg.Id.toString() -> { out.Id =  this.getString(i); has[0] = true }
      Msg.Name.toString() -> { out.Name =  this.getString(i); has[1] = true }
      Msg.LocaleNo.toString() -> { out.LocaleNo =  this.getInt(i); has[2] = true }
      Msg.No.toString() -> { out.No =  this.getInt(i); has[3] = true }
      Msg.No00.toString() -> { out.No00 =  this.getInt(i); has[4] = true }
      Msg.No1.toString() -> { out.No1 =  this.getShort(i); has[5] = true }
      Msg.No11.toString() -> { out.No11 =  this.getShort(i); has[6] = true }
      Msg.No2.toString() -> { out.No2 =  this.getShort(i).toByte(); has[7] = true }
      Msg.No22.toString() -> { out.No22 =  this.getShort(i).toByte(); has[8] = true }
      Msg.No3.toString() -> { out.No3 =  this.getDouble(i); has[9] = true }
      Msg.No33.toString() -> { out.No33 =  this.getDouble(i); has[10] = true }
      Msg.No4.toString() -> { out.No4 =  this.getFloat(i); has[11] = true }
      Msg.No44.toString() -> { out.No44 =  this.getFloat(i); has[12] = true }
      Msg.No5.toString() -> { out.No5 =  this.getLong(i); has[13] = true }
      Msg.No55.toString() -> { out.No55 =  this.getLong(i); has[14] = true }
      Msg.No6.toString() -> { out.No6 =  this.getInt(i) != 0; has[15] = true }
      Msg.No66.toString() -> { out.No66 =  this.getInt(i) != 0; has[16] = true }
      Msg.NoS.toString() -> { out.NoS =  this.getString(i); has[17] = true }
      Msg.NoBA.toString() -> { out.NoBA =  this.getBlob(i); has[18] = true }
      Msg.Ts.toString() -> { out.Ts =  this.getInt(i); has[19] = true }

      else -> {
        // nothing to do
        // the column is in the db, but not in the class Msg now.
      }
    }
  }

  return MsgHas(
    has[0], has[1], has[2], has[3], has[4], has[5], has[6], has[7], has[8], has[9], has[10], has[11], has[12], has[13], has[14], has[15], has[16], has[17], has[18], has[19],
  )
}

private fun Msg.Companion.CreateTableIn(db: com.github.xpwu.ktdbtable.DB<*>) {
  val tableName = db.Name(Msg::class) ?: tableName
  db.OnlyForInitTable {
    it.BeginTransaction()
    try {
      it.ExecSQL("CREATE TABLE IF NOT EXISTS `msg`(`id` TEXT   , `name` TEXT   , `local_no` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL , `no` INTEGER   , `no00` INTEGER   , `no1` INTEGER   , `no11` INTEGER   , `no2` INTEGER   , `no22` INTEGER   , `no3` REAL   , `no33` REAL   , `no4` REAL   , `no44` REAL   , `no5` INTEGER   , `no55` INTEGER   , `no6` INTEGER   , `no66` INTEGER   , `nos` TEXT   , `noba` BLOB   , `ts` INTEGER   )")
      for ((_, index) in Msg.allIndex()) {
        it.ExecSQL(index)
      }
      db.SetVersion(tableName, tableVersion)
      for (init in Msg.Initializer()) {
        it.Replace(tableName.noSqlKeyword(), init.ToContentValues())
      }
      it.SetTransactionSuccessful()
    } finally {
      it.EndTransaction()
    }
  }
}

private const val tableName = "msg"
private const val tableVersion = 0
